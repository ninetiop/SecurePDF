name: Build And Test

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    strategy:
      matrix:
        configuration: [Debug, Release]  # Configurations Debug et Release

    runs-on: windows-latest
    timeout-minutes: 10 # Consider increasing timeout

    env:
      Solution_Name: PdfLocker.sln  # Nom de la solution
      Test_Project_Dir: UnitTest
      Test_Project_Path: UnitTest\UnitTest.csproj  # Chemin vers ton projet de tests unitaires
      Wap_Project_Directory: WapProj  # Répertoire de ton projet WAP
      Wap_Project_Path: WapProj\WapProj.wapproj  # Chemin complet vers ton fichier WAP

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Récupère toute l'historique Git

    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v2

    - name: Restore NuGet packages
      run: nuget restore $env:Solution_Name
    - name: Restore the application
      run: msbuild $env:Solution_Name /t:Restore /p:Configuration=${{ matrix.configuration }}
    - name: Build the unit test project
      run: msbuild $env:Test_Project_Path /p:Configuration=${{ matrix.configuration }}
    - name: Execute unit tests
      run: dotnet vstest $env:Test_Project_Dir\bin\${{ matrix.configuration }}\UnitTest.dll
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: Build-Output
        path: PdfLocker\bin\${{matrix.configuration}}
    

    # Décoder le certificat PFX à partir des secrets GitHub
    #- name: Decode the pfx
      #run: |
        #$pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.Base64_Encoded_Pfx }}")
        #$certificatePath = Join-Path -Path $env:Wap_Project_Directory -ChildPath GitHubActionsWorkflow.pfx
        #[IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)
   
    # Créer le package MSIX en utilisant le projet WAP
    #- name: Create the app package
      #run: msbuild $env:Wap_Project_Path /p:Configuration=${{ matrix.configuration }} /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle /p:PackageCertificateKeyFile=GitHubActionsWorkflow.pfx /p:PackageCertificatePassword=${{ secrets.PFX_PASSWORD }}
      #env:
        #Appx_Bundle: Always
        #Appx_Bundle_Platforms: x86|x64
        #Appx_Package_Build_Mode: StoreUpload
        #Configuration: ${{ matrix.configuration }}

    # Supprimer le fichier PFX après l'utilisation
    #- name: Remove the pfx
      #run: Remove-Item -path $env:Wap_Project_Directory\GitHubActionsWorkflow.pfx

    # Télécharger les artefacts de build
    #- name: Upload build artifacts
      #uses: actions/upload-artifact@v3
      #with:
        #name: MSIX Package
        #path: ${{ env.Wap_Project_Directory }}\AppPackages
